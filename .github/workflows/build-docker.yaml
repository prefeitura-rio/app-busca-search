name: Build Docker image

on:
  push:
    branches:
      - main
      - staging

jobs:
  build:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install swag
        run: |
          mkdir -p bin
          GOBIN="$PWD/bin" go install github.com/swaggo/swag/cmd/swag@latest
          echo "$PWD/bin" >> $GITHUB_PATH

      - name: Generate Swagger v2
        run: swag init -g cmd/api/main.go

      - name: Install swagger2openapi
        run: npm install -g swagger2openapi

      - name: Convert to OpenAPI v3
        run: swagger2openapi docs/swagger.json -o docs/openapi-v3.json

      - name: Post-process OpenAPI v3 JSON
        run: |
          if [ "${GITHUB_REF##*/}" == "main" ]; then
            SERVER_URL="https://services.app.dados.rio/app-busca-search"
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
            SERVER_URL="https://services.staging.app.dados.rio/app-busca-search"
          fi
          jq --arg url "$SERVER_URL" '.servers = [{"url": $url}] |
              .components.securitySchemes = {
                "bearerAuth": {
                  "type": "http",
                  "scheme": "bearer",
                  "bearerFormat": "JWT"
                }
              } |
              .paths |= with_entries(.value |= with_entries(.value.security = [{"bearerAuth": []}]))' \
          docs/openapi-v3.json > docs/openapi-v3.json.tmp && \
          mv docs/openapi-v3.json.tmp docs/openapi-v3.json

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'

      - name: Commit and push OpenAPI v3
        run: |
          git add docs/openapi-v3.json
          git commit -m "chore: update OpenAPI v3 documentation" || echo "No changes to commit"
          git push

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Extract metadata for Docker tags
        id: meta
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/app-busca-search"

          if [ "${GITHUB_REF##*/}" == "main" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAGS="stable,$COMMIT_HASH"
          elif [ "${GITHUB_REF##*/}" == "staging" ]; then
            COMMIT_HASH=${{ github.sha }}
            TAGS="latest,$COMMIT_HASH"
          fi

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and tag Docker image
        run: |
          for TAG in $(echo $TAGS | tr "," "\n"); do
            docker build -t $IMAGE_NAME:$TAG .
          done

      - name: Push Docker image
        run: |
          for TAG in $(echo $TAGS | tr "," "\n"); do
            docker push $IMAGE_NAME:$TAG
          done
